---
- name: Get pidof resize2fs
  community.general.pids:
    name: resize2fs
  register: _resize2fs

- name: Wait for resize2fs
  when: _resize2fs | length
  ansible.builtin.wait_for:
    path: /proc/{{ _pid }}/status
    state: absent
  loop: "{{ _resize2fs['pids'] }}"
  loop_control:
    loop_var: _pid

- name: Download files
  become: true
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ storagechain_download_url }}"
    dest: /tmp

- name: Install IPFS
  vars:
    ipfs_private_network: true
    ipfs_version: "{{ storagechain_version }}"
    ipfs_checksum: "{{ storagechain_ipfs_checksum }}"
    ipfs_addresses_api: /ip4/0.0.0.0/tcp/5001
    ipfs_addresses_gateway: /ip4/0.0.0.0/tcp/8080
    ipfs_datastore_storage_max: "{{ storagechain_node_size }}"
    ipfs_api_http_headers:
      Access-Control-Allow-Origin: ["*"]
      Access-Control-Allow-Methods: ["PUT", "POST"]
  ansible.builtin.include_role:
    name: depin.libs.ipfs

- name: Install IPFS Cluster Follow
  vars:
    ipfs_cluster_follow_version: "{{ storagechain_version }}"
    ipfs_cluster_follow_checksum: "{{ storagechain_ipfs_cluster_follow_checksum }}"
    ipfs_cluster_follow_config_url: http://89.117.72.26:8080/ipns/k51qzi5uqu5dlh2h4gml3k5vik5mas2zos0pyf1shnfzj9d4nsg31lw4x7ujsk
    ipfs_cluster_follow_cluster_name: cluster_follower
    ipfs_cluster_follow_command_args: "{{ storagechain_ipfs_cluster_args }}"
    ipfs_cluster_follow_cluster_peername: "{{ storagechain_node_name }}"
    ipfs_cluster_follow_cluster_monitor_ping_interval: 5s
    ipfs_cluster_follow_ipfs_connector_ipfshttp_node_multiaddress: /ip4/0.0.0.0/tcp/5001
    ipfs_cluster_follow_api_restapi_http_listen_multiaddress: /ip4/0.0.0.0/tcp/9094
    ipfs_cluster_follow_env_vars:
      CLUSTER_MONITORINGINTERVAL: 5s
      CLUSTER_HOST_NAME: cluster-internal.io
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
  ansible.builtin.include_role:
    name: depin.libs.ipfs_cluster_follow

- name: Install File Server
  become: true
  block:
    - name: Create program folder
      ansible.builtin.file:
        state: directory
        owner: root
        group: root
        mode: '0755'
        recurse: true
        dest: /opt/{{ role_name }}/{{ storagechain_version }}

    - name: Find binary
      ansible.builtin.find:
        paths: /tmp
        patterns: 'file-server-lin$'
        use_regex: true
        get_checksum: true
        recurse: true
      register: _download

    - name: Extract binary
      ansible.builtin.copy:
        remote_src: true
        src: "{{ (_download['files'] | first)['path'] }}"
        dest: /opt/{{ role_name }}/{{ storagechain_version }}
        mode: preserve

    - name: Symlink binary to path
      ansible.builtin.file:
        src: /opt/{{ role_name }}/{{ storagechain_version }}/file-server-lin
        path: /usr/local/bin/storagechain
        mode: '0755'
        owner: root
        group: root
        state: hard
        force: true

    - name: Install systemd service
      ansible.builtin.template:
        src: templates/systemd.service.j2
        dest: /etc/systemd/system/storagechain.service
        owner: root
        group: root
        mode: '0644'

- name: Set firwall rules
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ _port }}"
    proto: "{{ service_data['protocol']['value'] | default('tcp') }}"
  loop: "{{ service_data['ports'] }}"
  loop_control:
    loop_var: _port

- name: Start
  ansible.builtin.include_tasks: commands/start.yml

# @todo - move outside to VM layer
- name: Enable DDNS
  vars:
    inadyn_hostname: "{{ storagechain_dns }}"
  ansible.builtin.include_role:
    name: depin.libs.inadyn

# @todo - temporary solution to get storagechain the IP address of node
- name: Forward IP Address to Storagechain
  vars:
    host_ipv4_address: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses | first) }}"
  tags: molecule-notest
  ansible.builtin.uri:
    url: 'https://api.storagechain.io/api/node/nerd-node/add-ipaddress'
    method: POST
    body:
      nodeId: "{{ storagechain_node_id }}"
      email: "{{ storagechain_email }}"
      password: "{{ storagechain_password }}"
      ipAddress: "{{ host_ipv4_address }}"
    body_format: json
    headers:
      Accept: application/json; indent=4
      Content-Type: application/json
    status_code:
      - 200
  register: send_ipv4_address
  retries: 5
  delay: 5
  until: send_ipv4_address is not failed

- name: Assert
  when: "'molecule' in groups"
  block:
    # relative to playbook (molecule - default)
    - name: Common install asserts
      ansible.builtin.include_tasks:
        file: tasks/asserts_install.yml

    - name: Get unique stats
      become: true
      ansible.builtin.stat:
        path: /home/ipfs/.{{ item }}
        follow: true
      loop:
        - ipfs
        - ipfs-cluster-follow
      register: _unique_stats

    - name: Check unique stats
      ansible.builtin.assert:
        that:
          - item['stat']['exists']
        quiet: true
      loop: "{{ _unique_stats['results'] }}"
      loop_control:
        label: "{{ item['stat']['path'] }}"