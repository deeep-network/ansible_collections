---
- name: Get last systemd timestamp
  become: true
  ansible.builtin.command: systemctl show deeep-services-watchdog.service -p ExecMainExitTimestamp --value
  register: _systemd_timestamp

- name: Get services that changed since last run (or last 30 minutes)
  vars:
    _id: "{{ lookup('pipe', 'hostname -s') | split('-') | last }}"
    _now: |-
      {{
        '%a %Y-%m-%d %H:%M:%S %Z' |
        strftime(ansible_date_time.epoch | int - ('30m' | community.general.to_seconds))
      }}
    _trigger: "{{ (_systemd_timestamp.stdout | length < 3) | ternary(_now, _systemd_timestamp.stdout) }}"
    _formatted_trigger: "{{ (_trigger | to_datetime('%a %Y-%m-%d %H:%M:%S %Z')).isoformat() }}"
    _filter: "changed_object_type=ipam.service time_after={{ _formatted_trigger }}"
    _all_services: "{{ query('depin.libs.netbox', 'extras.object-changes', filter=_filter) | map(attribute='value') }}"
    _prechange_services: |-
      {{
        _all_services |
        selectattr('prechange_data.virtual_machine', 'defined') |
        selectattr('prechange_data.virtual_machine', 'equalto', _id | int)
      }}
    _postchange_services: |-
      {{
        _all_services |
        selectattr('postchange_data.virtual_machine', 'defined') |
        selectattr('postchange_data.virtual_machine', 'equalto', _id | int)
      }}
  ansible.builtin.set_fact:
    changed_services: "{{ (_prechange_services + _postchange_services) | unique | sort(attribute='id') }}"

- name: Perform required changes
  vars:
    _type: "{{ _service['action']['value'] | extract({'delete': 'uninstall') | default('install') }}"
    _change_type: "{{ _type | extract({'uninstall': 'prechange_data'}) | default('postchange_data') }}"
    _tags: "{{ _service[_change_type]['tags'] | map('lower') | reject('contains', 'issue') | map('regex_replace','\\s','') }}"
    service_name: "{{ _tags | map('split', '-') | map('first') | unique | first }}"
    service_workloads: "{{ _tags | select('contains', service_name) | map('split', '-') | map('last') | unique }}"
    service_mode: "{{ _type }}"
    service_data: "{{ lookup('depin.libs.netbox', 'ipam.services', filter=_service['id']) }}"
  ansible.builtin.include_tasks:
    file: safe_include.yml
  loop: "{{ changed_services }}"
  loop_control:
    label: "{{ _service['id'] }}"
    loop_var: _service
