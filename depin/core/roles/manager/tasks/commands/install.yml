---
- name: Filter services with flagged issues
  vars:
    _has_issue_tag: "{{ service['tags'] | selectattr('slug', 'contains', 'issue') }}"
  when: _has_issue_tag | length == 0
  ansible.builtin.set_fact:
    filtered_services: "{{ (filtered_services | default([])) + [service] }}"
  loop: "{{ services }}"
  loop_control:
    loop_var: service
    label: "{{ service['id'] }}"

- name: Group services including workloads and install
  vars:
    _tags: "{{ service['tags'] | map(attribute='slug') }}"
    _roles: "{{ _tags | map('split', '-') | map('first') | unique }}"
    service_name: "{{ _roles | first }}"
    service_workloads: "{{ _tags | select('contains', service_name) | map('split', '-') | map('last') | unique }}"
    service_data: "{{ service }}"
  when: filtered_services is defined
  ansible.builtin.include_tasks:
    file: safe_include.yml
  loop: "{{ filtered_services }}"
  loop_control:
    loop_var: service
    label: "{{ service['id'] }}"

# @todo - temporary until orchestration is implemented
- name: DeEEP Services Watchdog
  block:
    - name: Install
      ansible.builtin.copy:
        src: files/{{ item }}
        dest: /etc/systemd/system/{{ item }}
        mode: '0644'
      loop:
        - deeep-services-watchdog.service
        - deeep-services-watchdog.timer

    - name: Start and enable timer
      ansible.builtin.systemd_service:
        name: deeep-services-watchdog.timer
        enable: true
        daemon_reload: true
        state: started
